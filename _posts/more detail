more detail

how to test it

example of build validation


# Controller
Controller is called EnquireController. We will type-hint ServiceFactory dependency in its constructor as constructor injection. Controller has property called `serviceFactory`. Controller also has a public function to set property like `setServiceFactory`. 


Controller will loading provider config for service string. ServiceFactory in controller will resolve ServiceDriver. Then controller will pass request into ServiceDriver. Driver will process data that controller don't need worry about any thing. 


By testing controller, we can create mockery class of ServiceFactory, and inject into controller by calling `setServiceFacotry`, and check if controller is doing right things. 


# Provider config


# ServiceFactory
The duty of ServiceFactory includes
 - Make instance object of each driver include default driver
 - Throw exception if driver is not exist



# Service Drivers

## Driver contract
Contract is a interface that define the core function of each driver. Below functions will be included in contract.

process
resolveService
isRequestValid
createEnquire
setClient
createLeadIn

### Function `process`
For each implimented class of contract. Controller only call process function and pass request into this funciton. 

### Function `resolveService`
First of all, function `process` will call `resolveService` in order to resolve service entity. A class called ServiceRepository will become method injection of function `resolveService`. `ServiceRepository` will take service ID from request and return service entity objecct.

### Function `isRequestValid`
Secondly, function `process` will call `isRequestValid`. This function validate request by using service validation config. Service has validation config for each field. in format like below.

`isRequestValid` function will format field config to laravel validation array. In that way, we can use Laravel native validation to check does request contain correct data.


Next, function `process` will call `createEnquire`

```
$validator = \Validator::make($request->all, $rules);
```


### Function createEnquire
After that, function `prcess` will call `createEnquire`. This function creates service_enquires entiry object based on request data. Request contains data include user ID, service ID and fields like phone number and user name. `createEnquire` function will filt out user ID and service ID and leave field data. Then creating enquire object.

The `createEnquire` funciton also get covered by test case. The test case create a request with user ID, service ID and some fake field data. Then passed into function, and compare returned enquire object and expected object, make sure they are same.




### Function `processLeadIn`

This function provider abbility to process and push data to third party online service like pipedrive. Function will check serivce object's lead_in_driver property. If `lead_in_driver` is empty, throw exception.

A class called LeadInFactory will becaome method injection of function `porcessLeadIn`. The duty of LeadInFactory is making instance object of lead in driver by using lead_in_driver property. 


After a lead-in driver has been made. Function `processLeadIn` pass enquire object into driver, let driver to prcess it.



### Function setLeadInFactory
In order to testing `processLeadIn` function, we can create mockerty class LeadInFactory, and inject into object of service driver by using `setLeadInFactory`.


## LeadInFactory
The duty of LeadInfactory includes:
Make instance object of each driver include default driver
Throw exception if driver is not exist



## Lead-in driver
Driver Interface

Contract is a interface that define the core function of each driver. Below functions will be included in lead-in driver contract.

post
createLeadInRequest
sendRequest
markEnquireAsSent

Function post
For each implimented driver class of contract. `post` function is only called function. 

### Function createLeadInRequest
This function convert enquire function to lead-in data format. (To be decied)

### Function sendRequest
This function will post lead-in data to third party service API. (To be decied)

### Function markEnquireAsSent
This function will make enquire object as sent, which is update property `is_sent` from 0 to 1. 




=====================




Controller will use a repository class called `ServiceRepository` to retrive service. Request data will pass `service_id` into repository class, and get a service object return. Controller also will have a public function called `setServiceRepository`. In that way, controller can inject a mockry class into controller, which is easy to test. 

ServiceRepository is be able to retirve service from database by using service ID that passed from request. Test case will cover repository class. Test case will use EnvironmentFactory create a service , then package service ID to a request object, pass this request object into repository. See return service object is same with that service in EnvironmentFactory. 



Service has validation config for each field. in format like below. 




Service model will have a public `formatValidation` function. This function will format field config to laravel validation array. In that way, we can use Laravel native validation to check does request contain correct data. 


$service->fields = [
    [
        'field_name' => 'phone',
        'validator' => 'required',
    ],
    [
        'field_name' => 'start_time',
        'validator' => 'required|min:0|max:23',
    ],
    [
        'field_name' => 'end_time',
        'validation' => 'required|min:0|max:23',
    ],
];

$validator = $service->formatValidation();

// validator will be like
// [
// 		'phone' => 'required',
//     'start_time'  => 'required|min:0|max:23',
//     'end_time'  => 'required|min:0|max:23',   
// ];


Public model function `formatValidation` will cover by a model test case in order to check it return correct validation array. Test case will create sample service fields config just like above. Then call `formatValidation` get validation array return. Compare it to what we excpetd. 


ServiceRepository will provider funciton to create service_enquires entiry object based on request data. It called `createEnquire`. Request contains data include user ID, service ID and fields like phone number and user name. The `createEnquire` function will filt out user ID and service ID and leave field data. Then creating enquire object.

The `createEnquire` funciton also get covered by test case. The test case create a request with user ID, service ID and some fake field data. Then passed into function, and compare returned enquire object and expected object, make sure they are same. 




```
Retrieve data;
if(!has $data['service_id'] ?) {
  return HTTP_404;
}

// See Code Flow
1.Resolve service

2.Build validation

if(!$data passed $validation?)
{
  return HTTP_400;
}

3.Format $data to $enquire;

$enquire->save();

4.Build $lead-in based on $enquire;

5.Push $lead-in data to pipedrive API;

6.Send email to someone with report;

```


